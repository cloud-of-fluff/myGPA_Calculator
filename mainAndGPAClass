import java.util.Scanner;

public class GradePointCalculatorUpdated {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		//First, I must ask the student to input their name and store it as a value.

		Scanner userInput = new Scanner (System.in);
		System.out.println("What is your name?");
		String studentName =userInput.nextLine();

		System.out.println("How many classes are you enrolled in");
		int enrolledNumber = userInput.nextInt();



		GPA_1[] studentGPA = new GPA_1[enrolledNumber];
		
		createArray(studentGPA);
		populateClassNames(studentGPA);
		populateCreditsWorth(studentGPA);
		populateLetterGrade(studentGPA);
		populateGradePoints(studentGPA);
		double totalCreditHours = totalCreditHours(studentGPA);
		double totalGradePoints = totalGradePoints(studentGPA);
		double gpa = actualGPA(totalGradePoints, totalCreditHours);

		System.out.println("                                               ");
		System.out.println("***********************************************");
		System.out.println("Student Name: " + studentName);
		System.out.println("                                  ");

		gradeDisplay(studentGPA, gpa, totalGradePoints, totalCreditHours, studentName);

		userInput.close();

	}
	
	public static void createArray(GPA_1[] studentGPA) {
		
		for (int i =0; i<studentGPA.length; i++) {
			
		 studentGPA[i] = new GPA_1("", 0, 0, 0);
		 
		}
	}

	public static void populateClassNames(GPA_1[] studentGPA) {

		Scanner userInput = new Scanner(System.in);
		System.out.println("What classes are you taking?");

		for (int i = 0; i<studentGPA.length; i++) {

			studentGPA[i].setClassName(userInput.nextLine());

		}

		userInput.close();

	}//classNames

	public static void populateLetterGrade(GPA_1[] studentGPA) {

		Scanner userInput = new Scanner(System.in);
		System.out.println("Expected Grade for each class in the order you listed them if A=4, B=3, C=2, D=1, and F=0");

		for (int i = 0; i<studentGPA.length; i++) {

			studentGPA[i].setLetterGrade(userInput.nextInt());

		}

		userInput.close();
	}

	public static void populateCreditsWorth(GPA_1[] studentGPA) {

		Scanner userInput = new Scanner(System.in);
		System.out.println("Credits Each Class is Worth in the order you listed them:");

		for (int i = 0; i<studentGPA.length; i++) {

			studentGPA[i].setCreditsWorth(userInput.nextInt());

		}

		userInput.close();

	}

	public static void populateGradePoints(GPA_1[] studentGPA) {

		int credits = 0;
		int letterGrade = 0;	

		for (int i = 0; i<studentGPA.length; i++) {

			credits = studentGPA[i].getCreditsWorth();
			letterGrade = studentGPA[i].getLetterGrade();

			studentGPA[i].setGradePoints(credits*letterGrade);

		}

	}

	public static double totalGradePoints(GPA_1[] studentGPA) {

		double totalGradePoints =  0;
		for (int i=0; i<studentGPA.length; i++) {

			totalGradePoints = totalGradePoints + studentGPA[i].getGradePoints();

		}
		return totalGradePoints;
	}

	public static double totalCreditHours(GPA_1[] studentGPA) {

		double totalCreditHours = 0;
		for (int i=0; i<studentGPA.length; i++) {

			totalCreditHours = totalCreditHours + studentGPA[i].getCreditsWorth();

		}
		return totalCreditHours;
	}

	public static double actualGPA(double totalGradePoints, double totalCreditHours) {

		double gpa = totalGradePoints/totalCreditHours;
		return gpa;

	}

	public static void gradeDisplay(GPA_1[] studentGPA, double GPA, double totalGradePoints, double totalCreditHours, String studentName) {

		System.out.println("Class Information:");

		for (int i=0; i<studentGPA.length; i++) {

			System.out.println("----------------------------------------");
			System.out.println("Name of Class: " + studentGPA[i].getClassName());
			System.out.println("Number of Credit Hours: " + studentGPA[i].getCreditsWorth());
			System.out.println("Expected Grade if A=4, B=3, C=2, D=1, F=0? " + studentGPA[i].getLetterGrade());
		}



		System.out.println("                                             ");
		System.out.println("*********************************************");
		System.out.println("                 GPA Calculator              ");
		System.out.println("*********************************************");
		System.out.println("                                             ");
		System.out.println("Class	Credit Hours	Expected Grade (A=4, B=3, C=2, D=1, F=0)	Grade Points");

		for (int i=0; i<studentGPA.length; i++) {

			System.out.println("-------------------------------------------------------------------------------------");
			System.out.println(studentGPA[i].getClassName() + "\t" + studentGPA[i].getCreditsWorth() + "\t" 
					+ studentGPA[i].getLetterGrade() + "\t" + studentGPA[i].getGradePoints());
			System.out.println("-------------------------------------------------------------------------------------");

			totalCreditHours = totalCreditHours + studentGPA[i].getCreditsWorth();
			totalGradePoints = totalGradePoints + studentGPA[i].getGradePoints();
		}

		System.out.println("Totals:		"+ totalCreditHours + "							"+ totalGradePoints);
		System.out.println("                                                       ");
		System.out.println(studentName + " your projected GPA for all of your classes is " + GPA);

	}

}//GPA Calculator Updated

class GPA_1 {

	private String className;
	private int letterGrade;
	private int creditsWorth;
	private double gradePoints;

	public GPA_1(String className, int creditsWorth, int letterGrade, double gradePoints){

		this.className=className;
		this.letterGrade=letterGrade;
		this.creditsWorth=creditsWorth;
		this.gradePoints=gradePoints;

	}//GPA 1 constructor

	public String getClassName() {
		return className;
	}

	public int getLetterGrade() {
		return letterGrade;
	}

	public int getCreditsWorth() {
		return creditsWorth;
	}

	public double getGradePoints() {
		return gradePoints;
	}

	public void setClassName(String incomingName) {
		className = incomingName;
	}

	public void setLetterGrade(int incomingLetter) {
		letterGrade = incomingLetter;
	}

	public void setCreditsWorth(int incomingCredits) {
		creditsWorth = incomingCredits;
	}

	public void setGradePoints(double incomingGradePoints) {
		gradePoints = incomingGradePoints;
	}

}//GPA Class
